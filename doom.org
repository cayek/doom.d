#+TITLE: Doom config and more


* Theme
#+BEGIN_SRC elisp :tangle config.el
;;; $DOOMDIR/config.el -*- lexical-binding: t; -*-

;; Place your private configuration here! Remember, you do not need to run 'doom
;; sync' after modifying this file!


;; Some functionality uses this to identify you, e.g. GPG configuration, email
;; clients, file templates and snippets.
(setq user-full-name "Kevin caye"
      user-mail-address "kevin.caye@probayes.com")

;; Doom exposes five (optional) variables for controlling fonts in Doom. Here
;; are the three important ones:
;;
;; + `doom-font'
;; + `doom-variable-pitch-font'
;; + `doom-big-font' -- used for `doom-big-font-mode'; use this for
;;   presentations or streaming.
;;
;; They all accept either a font-spec, font string ("Input Mono-12"), or xlfd
;; font string. You generally only need these two:
(setq doom-font (font-spec :family "Source Code Pro" :size 17 :weight 'semi-light)
      doom-variable-pitch-font (font-spec :family "sans" :size 13))

;; There are two ways to load a theme. Both assume the theme is installed and
;; available. You can either set `doom-theme' or manually load a theme with the
;; `load-theme' function. This is the default:
(setq doom-theme 'doom-one)

;; This determines the style of line numbers in effect. If set to `nil', line
;; numbers are disabled. For relative line numbers, set this to `relative'.
(setq display-line-numbers-type t)


;; Here are some additional functions/macros that could help you configure Doom:
;;
;; - `load!' for loading external *.el files relative to this one
;; - `use-package!' for configuring packages
;; - `after!' for running code after a package has loaded
;; - `add-load-path!' for adding directories to the `load-path', relative to
;;   this file. Emacs searches the `load-path' when you load packages with
;;   `require' or `use-package'.
;; - `map!' for binding new keys
;;
;; To get information about any of these functions/macros, move the cursor over
;; the highlighted symbol at press 'K' (non-evil users must press 'C-c c k').
;; This will open documentation for it, including demos of how they are used.
;;
;; You can also try 'gd' (or 'C-c c d') to jump to their definition and see how
;; they are implemented.
#+END_SRC

#+RESULTS:
: t

* UI

** Emacs
#+BEGIN_SRC elisp :results silent :tangle config.el

;;; :ui
(map! (:when (featurep! :ui popup)
       "C-<"   #'+popup/toggle
       "C-é"   #'+popup/raise
       "C-x p" #'+popup/other)

      (:when (featurep! :ui workspaces)
        :g "s-t"   #'+workspace/new
        :g "s-T"   #'+workspace/display
        :n "s-&"   #'+workspace/switch-to-0
        :n "s-é"   #'+workspace/switch-to-1
        :n "s-\""   #'+workspace/switch-to-2
        :n "s-'"   #'+workspace/switch-to-3
        :n "s-("   #'+workspace/switch-to-4
        :n "s--"   #'+workspace/switch-to-5
        :n "s-è"   #'+workspace/switch-to-6
        :n "s-_"   #'+workspace/switch-to-7
        :n "s-ç"   #'+workspace/switch-to-8
        :n "s-à"   #'+workspace/switch-to-final
        :n "s-<tab>"   #'+workspace/other

        :leader
        (:prefix-map ("TAB" . "workspace")
        :desc "Display tab bar"           "TAB" #'+workspace/display
        :desc "Switch to last workspace"          "a"   #'+workspace/other
        :desc "Search workspace"          "z"   #'+workspace/switch-to
        ;; for azerty keyboard
        :desc "Switch to worspace 0"          "&"   #'+workspace/switch-to-0
        :desc "Switch to workspace 1"          "é"   #'+workspace/switch-to-1
        :desc "Switch to worspace 2"          "\""   #'+workspace/switch-to-2
        :desc "Switch to worspace 3"          "'"   #'+workspace/switch-to-3
        :desc "Switch to worspace 4"          "("   #'+workspace/switch-to-4
        :desc "Switch to worspace 5"          "-"   #'+workspace/switch-to-5
        :desc "Switch to worspace 6"          "è"   #'+workspace/switch-to-6
        :desc "Switch to worspace 7"          "_"   #'+workspace/switch-to-7

        )

        ))

;;
;;; <leader>
(map! :leader
      (:when (featurep! :ui popup)
       :desc "Toggle last popup"     "é"    #'+popup/toggle)
      (:when (featurep! :ui workspaces)
      :desc "Switch to last buffer" "&"    #'evil-switch-to-windows-last-buffer))

;; windows
(define-key evil-window-map (kbd "<right>") 'evil-window-right)
(define-key evil-window-map (kbd  "<left>") 'evil-window-left)
(define-key evil-window-map (kbd "<up>") 'evil-window-up)
(define-key evil-window-map (kbd "<down>") 'evil-window-down)
#+END_SRC
** I3
#+BEGIN_SRC conf :tangle ~/.config/i3/config
# i3 config file (v4)
#
# Please see https://i3wm.org/docs/userguide.html for a complete reference!
#
# This config file uses keycodes (bindsym) and was written for the QWERTY
# layout.
#
# To get a config file with the same key positions, but for your current
# layout, use the i3-config-wizard
#

set $mod Mod4

# Font for window titles. Will also be used by the bar unless a different font
# is used in the bar {} block below.
font pango:monospace 8

# This font is widely installed, provides lots of unicode glyphs, right-to-left
# text rendering and scalability on retina/hidpi displays (thanks to pango).
#font pango:DejaVu Sans Mono 8

# Before i3 v4.8, we used to recommend this one as the default:
# font -misc-fixed-medium-r-normal--13-120-75-75-C-70-iso10646-1
# The font above is very space-efficient, that is, it looks good, sharp and
# clear in small sizes. However, its unicode glyph coverage is limited, the old
# X core fonts rendering does not support right-to-left and this being a bitmap
# font, it doesn’t scale on retina/hidpi displays.

# use these keys for focus, movement, and resize directions when reaching for
# the arrows is not convenient
set $up l
set $down k
set $left j
set $right semicolon

# use Mouse+Mod1 to drag floating windows to their wanted position
floating_modifier $mod

# start a terminal
bindsym $mod+Return exec "/home/kcaye/.local/kitty.app/bin/kitty"

# kill focused window
bindsym $mod+Shift+q kill

# start dmenu (a program launcher)
bindsym $mod+d exec dmenu_run
# There also is the (new) i3-dmenu-desktop which only displays applications
# shipping a .desktop file. It is a wrapper around dmenu, so you need that
# installed.
# bindsym Mod1+d exec --no-startup-id i3-dmenu-desktop

# change focus
bindsym $mod+$left focus left
bindsym $mod+$down focus down
bindsym $mod+$up focus up
bindsym $mod+$right focus right

# alternatively, you can use the cursor keys:
bindsym $mod+Left focus left
bindsym $mod+Down focus down
bindsym $mod+Up focus up
bindsym $mod+Right focus right

# move focused window
bindsym $mod+Shift+$left move left
bindsym $mod+Shift+$down move down
bindsym $mod+Shift+$up move up
bindsym $mod+Shift+$right move right

# alternatively, you can use the cursor keys:
bindsym $mod+Shift+Left move left
bindsym $mod+Shift+Down move down
bindsym $mod+Shift+Up move up
bindsym $mod+Shift+Right move right

# split in horizontal orientation
bindsym $mod+h split h

# split in vertical orientation
bindsym $mod+v split v

# enter fullscreen mode for the focused container
bindsym $mod+f fullscreen toggle

# change container layout (stacked, tabbed, toggle split)
bindsym $mod+s layout stacking
bindsym $mod+w layout tabbed
bindsym $mod+e layout toggle split

# toggle tiling / floating
bindsym $mod+Shift+space floating toggle

# change focus between tiling / floating windows
# bindsym Mod1+space focus mode_toggle

# focus the parent container
bindsym $mod+a focus parent

# focus the child container
#bindsym Mod1+d focus child

# move the currently focused window to the scratchpad
bindsym $mod+Shift+minus move scratchpad

# Show the next scratchpad window or hide the focused scratchpad window.
# If there are multiple scratchpad windows, this command cycles through them.
bindsym $mod+minus scratchpad show

# switch to workspace
bindsym $mod+1 workspace 1
bindsym $mod+2 workspace 2
bindsym $mod+3 workspace 3
bindsym $mod+4 workspace 4
bindsym $mod+5 workspace 5
bindsym $mod+6 workspace 6
bindsym $mod+7 workspace 7
bindsym $mod+8 workspace 8
bindsym $mod+9 workspace 9
bindsym $mod+0 workspace 10

# move focused container to workspace
bindsym $mod+Shift+1 move container to workspace 1
bindsym $mod+Shift+2 move container to workspace 2
bindsym $mod+Shift+3 move container to workspace 3
bindsym $mod+Shift+4 move container to workspace 4
bindsym $mod+Shift+5 move container to workspace 5
bindsym $mod+Shift+6 move container to workspace 6
bindsym $mod+Shift+7 move container to workspace 7
bindsym $mod+Shift+8 move container to workspace 8
bindsym $mod+Shift+9 move container to workspace 9
bindsym $mod+Shift+0 move container to workspace 10

# reload the configuration file
bindsym $mod+Shift+c reload
# restart i3 inplace (preserves your layout/session, can be used to upgrade i3)
bindsym $mod+Shift+r restart
# exit i3 (logs you out of your X session)
bindsym $mod+Shift+e exec "i3-nagbar -t warning -m 'You pressed the exit shortcut. Do you really want to exit i3? This will end your X session.' -b 'Yes, exit i3' 'i3-msg exit'"

# resize window (you can also use the mouse for that)
mode "resize" {
        # These bindings trigger as soon as you enter the resize mode

        # Pressing left will shrink the window’s width.
        # Pressing right will grow the window’s width.
        # Pressing up will shrink the window’s height.
        # Pressing down will grow the window’s height.
        bindsym $left       resize shrink width 10 px or 10 ppt
        bindsym $down       resize grow height 10 px or 10 ppt
        bindsym $up         resize shrink height 10 px or 10 ppt
        bindsym $right      resize grow width 10 px or 10 ppt

        # same bindings, but for the arrow keys
        bindsym Left        resize shrink width 10 px or 10 ppt
        bindsym Down        resize grow height 10 px or 10 ppt
        bindsym Up          resize shrink height 10 px or 10 ppt
        bindsym Right       resize grow width 10 px or 10 ppt

        # back to normal: Enter or Escape
        bindsym Return mode "default"
        bindsym Escape mode "default"
}

bindsym $mod+r mode "resize"

# Start i3bar to display a workspace bar (plus the system information i3status
# finds out, if available)
bar {
        status_command i3status
}

# lock screen
bindsym $mod+Shift+x exec i3lock

# capture with shutter
Bindsym $mod+* Exec shutter -s


#######################################################################
# automatically start i3-config-wizard to offer the user to create a
# keysym-based config which used their favorite modifier (alt or windows)
#
# i3-config-wizard will not launch if there already is a config file
# in ~/.i3/config.
#
# Please remove the following exec line:
#######################################################################
# exec nextcloud

#+END_SRC
* org
** Default app :hack:
Not sure this a the best way to do it
#+BEGIN_SRC elisp
(delete '("\\.png\\'" . default) org-file-apps)
(add-to-list 'org-file-apps '("\\.png\\'" . "feh %s"))
#+END_SRC

#+RESULTS:
: ((\.png\' . feh %s) (auto-mode . emacs) (directory . emacs) (\.mm\' . default) (\.x?html?\' . default) (\.pdf\' . default))

** Task management
#+BEGIN_SRC elisp :tangle config.el :results silent
;; org capture
;;
(after! org
  (add-to-list 'org-capture-templates
               '("m" "Meeting" entry (file "~/org/INBOX.org")
                 "* meeting with %? :MEETING:\n%U"
                 :clock-in t
                 :clock-resume t))
  ;; org tag
  (setq org-tag-alist (quote ((:startgroup)
                              ;; who is the client/owner ?
                              ("@probayes" . ?s)
                              ("@perso" . ?p)
                              (:endgroup)
                              )))
  ;; org agenda
  (setq org-agenda-files
        '("~/org/INBOX.org"
          "~/org/todo.org"
          "~/org/notes.org"
          "~/org/probayes/probayes.org"
          "~/org/probayes/framatome/framatome.org"
          "~/org/probayes/demoauto/demoauto.org"
          )
        )
  (set-popup-rule! "*Org Agenda*" :side 'right :size .40 :select t :vslot 2 :ttl 3)
  ;; Separate drawers for clocking and logs
  (setq org-drawers (quote ("PROPERTIES" "LOGBOOK")))
  ;; Save clock data and state changes and notes in the LOGBOOK drawer
  (setq org-clock-into-drawer t)
  (setq org-log-state-notes-into-drawer t)

  (setq org-duration-units
        `(("min" . 1)
          ("h" . 60)
          ;; seven-hour days
          ("d" . ,(* 60 7))
          ;; five-day work week
          ("w" . ,(* 60 8 5))
          ;; four weeks in a month
          ("m" . ,(* 60 8 5 4))
          ;; work a total of 12 months a year --
          ;; this is independent of holiday and sick time taken
          ("y" . ,(* 60 8 5 4 12))))
)
#+END_SRC
** TODO org agenda

#+BEGIN_SRC elisp
(map! :leader
      (:when (featurep! :ui popup)
       :desc "Open agenda"     "a"    #'+popup/toggle)
      (:when (featurep! :ui workspaces)
      :desc "Switch to last buffer" "&"    #'evil-switch-to-windows-last-buffer))
(org-agenda)

(defun cayek:agenda ()
  "Activate (or switch to) `Org-Agenda'."
  (interactive)
  (org-agenda nil "a")
  )

#+END_SRC

#+RESULTS:
*** Custom agenda view
#+BEGIN_SRC elisp :results silent :tangle config.el
(after! org
  (setq org-agenda-custom-commands
        '(("d" "Day" agenda "Day of work"
          (
           (org-agenda-span 1)
           (org-agenda-start-with-log-mode '(closed clock state))
           (org-agenda-start-with-clockreport-mode t)
           )
          )))
  )
#+END_SRC

** TODO Org super agenda
** TODO Notes
#+BEGIN_SRC elisp :tangle config.el :results silent
(setq deft-recursive t)
(setq org-roam-tag-sources '(prop all-directories))
#+END_SRC

#+RESULTS:
: t

* Mail
#+BEGIN_SRC elisp :tangle config.el
(after! notmuch
  (setq send-mail-function 'sendmail-send-it
        sendmail-program "/usr/bin/msmtp"
        mail-specify-envelope-from t
        message-sendmail-envelope-from 'header
        mail-envelope-from 'header
        notmuch-message-headers-visible t
        )
)
#+END_SRC

* Agenda
* Images
** Tools
*** sxiv
:LOGBOOK:
- Note taken on [2020-09-10 jeu. 15:00] \\
  see [[https://wiki.archlinux.org/index.php/Sxiv][Assigning keyboard shortcuts]]
:END:
#+BEGIN_SRC shell
#!/bin/sh
while read file
do
        case "$1" in
        "C-r")
                convert -rotate 90 "$file" "$file" ;;
        "C-c")
                echo -n "$file" | xclip -selection clipboard ;;
        "C-w")
                nitrogen --save --set-zoom-fill "$file" ;;
        esac
done
#+END_SRC
* Shell
** eshell
*** Keep sudo pass
:LOGBOOK:
- Note taken on [2020-09-14 lun. 20:40] \\
  see https://emacs.stackexchange.com/questions/5608/how-to-let-eshell-remember-sudo-password-for-two-minutes

  and to proper way to do that with doom (see [[https://github.com/hlissner/doom-emacs/blob/develop/docs/getting_started.org#configuring-doom][Configuring Doom]])
:END:

#+BEGIN_SRC elisp
(after! org)
#+END_SRC
